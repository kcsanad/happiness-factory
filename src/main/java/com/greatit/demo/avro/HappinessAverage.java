/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.greatit.demo.avro;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

/** Average value of items produced by Happiness machine in time window */
@org.apache.avro.specific.AvroGenerated
public class HappinessAverage extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 1361295845309283867L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"HappinessAverage\",\"namespace\":\"com.greatit.demo.avro\",\"doc\":\"Average value of items produced by Happiness machine in time window\",\"fields\":[{\"name\":\"total\",\"type\":\"double\",\"doc\":\"total amount of produced happiness by Happiness machine in time window\"},{\"name\":\"num_of_produced\",\"type\":\"long\",\"doc\":\"how many items were produced by Happiness machine in time window\"},{\"name\":\"avg_of_produced\",\"type\":\"double\",\"doc\":\"avg of produced happiness items in time window\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<HappinessAverage> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<HappinessAverage> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<HappinessAverage> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<HappinessAverage> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<HappinessAverage> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this HappinessAverage to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a HappinessAverage from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a HappinessAverage instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static HappinessAverage fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** total amount of produced happiness by Happiness machine in time window */
  private double total;
  /** how many items were produced by Happiness machine in time window */
  private long num_of_produced;
  /** avg of produced happiness items in time window */
  private double avg_of_produced;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public HappinessAverage() {}

  /**
   * All-args constructor.
   * @param total total amount of produced happiness by Happiness machine in time window
   * @param num_of_produced how many items were produced by Happiness machine in time window
   * @param avg_of_produced avg of produced happiness items in time window
   */
  public HappinessAverage(java.lang.Double total, java.lang.Long num_of_produced, java.lang.Double avg_of_produced) {
    this.total = total;
    this.num_of_produced = num_of_produced;
    this.avg_of_produced = avg_of_produced;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return total;
    case 1: return num_of_produced;
    case 2: return avg_of_produced;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: total = (java.lang.Double)value$; break;
    case 1: num_of_produced = (java.lang.Long)value$; break;
    case 2: avg_of_produced = (java.lang.Double)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'total' field.
   * @return total amount of produced happiness by Happiness machine in time window
   */
  public double getTotal() {
    return total;
  }


  /**
   * Sets the value of the 'total' field.
   * total amount of produced happiness by Happiness machine in time window
   * @param value the value to set.
   */
  public void setTotal(double value) {
    this.total = value;
  }

  /**
   * Gets the value of the 'num_of_produced' field.
   * @return how many items were produced by Happiness machine in time window
   */
  public long getNumOfProduced() {
    return num_of_produced;
  }


  /**
   * Sets the value of the 'num_of_produced' field.
   * how many items were produced by Happiness machine in time window
   * @param value the value to set.
   */
  public void setNumOfProduced(long value) {
    this.num_of_produced = value;
  }

  /**
   * Gets the value of the 'avg_of_produced' field.
   * @return avg of produced happiness items in time window
   */
  public double getAvgOfProduced() {
    return avg_of_produced;
  }


  /**
   * Sets the value of the 'avg_of_produced' field.
   * avg of produced happiness items in time window
   * @param value the value to set.
   */
  public void setAvgOfProduced(double value) {
    this.avg_of_produced = value;
  }

  /**
   * Creates a new HappinessAverage RecordBuilder.
   * @return A new HappinessAverage RecordBuilder
   */
  public static com.greatit.demo.avro.HappinessAverage.Builder newBuilder() {
    return new com.greatit.demo.avro.HappinessAverage.Builder();
  }

  /**
   * Creates a new HappinessAverage RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new HappinessAverage RecordBuilder
   */
  public static com.greatit.demo.avro.HappinessAverage.Builder newBuilder(com.greatit.demo.avro.HappinessAverage.Builder other) {
    if (other == null) {
      return new com.greatit.demo.avro.HappinessAverage.Builder();
    } else {
      return new com.greatit.demo.avro.HappinessAverage.Builder(other);
    }
  }

  /**
   * Creates a new HappinessAverage RecordBuilder by copying an existing HappinessAverage instance.
   * @param other The existing instance to copy.
   * @return A new HappinessAverage RecordBuilder
   */
  public static com.greatit.demo.avro.HappinessAverage.Builder newBuilder(com.greatit.demo.avro.HappinessAverage other) {
    if (other == null) {
      return new com.greatit.demo.avro.HappinessAverage.Builder();
    } else {
      return new com.greatit.demo.avro.HappinessAverage.Builder(other);
    }
  }

  /**
   * RecordBuilder for HappinessAverage instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<HappinessAverage>
    implements org.apache.avro.data.RecordBuilder<HappinessAverage> {

    /** total amount of produced happiness by Happiness machine in time window */
    private double total;
    /** how many items were produced by Happiness machine in time window */
    private long num_of_produced;
    /** avg of produced happiness items in time window */
    private double avg_of_produced;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.greatit.demo.avro.HappinessAverage.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.total)) {
        this.total = data().deepCopy(fields()[0].schema(), other.total);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.num_of_produced)) {
        this.num_of_produced = data().deepCopy(fields()[1].schema(), other.num_of_produced);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.avg_of_produced)) {
        this.avg_of_produced = data().deepCopy(fields()[2].schema(), other.avg_of_produced);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
    }

    /**
     * Creates a Builder by copying an existing HappinessAverage instance
     * @param other The existing instance to copy.
     */
    private Builder(com.greatit.demo.avro.HappinessAverage other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.total)) {
        this.total = data().deepCopy(fields()[0].schema(), other.total);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.num_of_produced)) {
        this.num_of_produced = data().deepCopy(fields()[1].schema(), other.num_of_produced);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.avg_of_produced)) {
        this.avg_of_produced = data().deepCopy(fields()[2].schema(), other.avg_of_produced);
        fieldSetFlags()[2] = true;
      }
    }

    /**
      * Gets the value of the 'total' field.
      * total amount of produced happiness by Happiness machine in time window
      * @return The value.
      */
    public double getTotal() {
      return total;
    }


    /**
      * Sets the value of the 'total' field.
      * total amount of produced happiness by Happiness machine in time window
      * @param value The value of 'total'.
      * @return This builder.
      */
    public com.greatit.demo.avro.HappinessAverage.Builder setTotal(double value) {
      validate(fields()[0], value);
      this.total = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'total' field has been set.
      * total amount of produced happiness by Happiness machine in time window
      * @return True if the 'total' field has been set, false otherwise.
      */
    public boolean hasTotal() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'total' field.
      * total amount of produced happiness by Happiness machine in time window
      * @return This builder.
      */
    public com.greatit.demo.avro.HappinessAverage.Builder clearTotal() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'num_of_produced' field.
      * how many items were produced by Happiness machine in time window
      * @return The value.
      */
    public long getNumOfProduced() {
      return num_of_produced;
    }


    /**
      * Sets the value of the 'num_of_produced' field.
      * how many items were produced by Happiness machine in time window
      * @param value The value of 'num_of_produced'.
      * @return This builder.
      */
    public com.greatit.demo.avro.HappinessAverage.Builder setNumOfProduced(long value) {
      validate(fields()[1], value);
      this.num_of_produced = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'num_of_produced' field has been set.
      * how many items were produced by Happiness machine in time window
      * @return True if the 'num_of_produced' field has been set, false otherwise.
      */
    public boolean hasNumOfProduced() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'num_of_produced' field.
      * how many items were produced by Happiness machine in time window
      * @return This builder.
      */
    public com.greatit.demo.avro.HappinessAverage.Builder clearNumOfProduced() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'avg_of_produced' field.
      * avg of produced happiness items in time window
      * @return The value.
      */
    public double getAvgOfProduced() {
      return avg_of_produced;
    }


    /**
      * Sets the value of the 'avg_of_produced' field.
      * avg of produced happiness items in time window
      * @param value The value of 'avg_of_produced'.
      * @return This builder.
      */
    public com.greatit.demo.avro.HappinessAverage.Builder setAvgOfProduced(double value) {
      validate(fields()[2], value);
      this.avg_of_produced = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'avg_of_produced' field has been set.
      * avg of produced happiness items in time window
      * @return True if the 'avg_of_produced' field has been set, false otherwise.
      */
    public boolean hasAvgOfProduced() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'avg_of_produced' field.
      * avg of produced happiness items in time window
      * @return This builder.
      */
    public com.greatit.demo.avro.HappinessAverage.Builder clearAvgOfProduced() {
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public HappinessAverage build() {
      try {
        HappinessAverage record = new HappinessAverage();
        record.total = fieldSetFlags()[0] ? this.total : (java.lang.Double) defaultValue(fields()[0]);
        record.num_of_produced = fieldSetFlags()[1] ? this.num_of_produced : (java.lang.Long) defaultValue(fields()[1]);
        record.avg_of_produced = fieldSetFlags()[2] ? this.avg_of_produced : (java.lang.Double) defaultValue(fields()[2]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<HappinessAverage>
    WRITER$ = (org.apache.avro.io.DatumWriter<HappinessAverage>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<HappinessAverage>
    READER$ = (org.apache.avro.io.DatumReader<HappinessAverage>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeDouble(this.total);

    out.writeLong(this.num_of_produced);

    out.writeDouble(this.avg_of_produced);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.total = in.readDouble();

      this.num_of_produced = in.readLong();

      this.avg_of_produced = in.readDouble();

    } else {
      for (int i = 0; i < 3; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.total = in.readDouble();
          break;

        case 1:
          this.num_of_produced = in.readLong();
          break;

        case 2:
          this.avg_of_produced = in.readDouble();
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










